
# Jetson TX1をVirtualBox上のUbuntu14.04からセットアップする
# http://qiita.com/0x0c@github/items/bc2683b00617981e4468

#JETSON TK1のセットアップ(JETPACK, GRINCH, ROS JADEのインストール)
#https://daichiahl.wordpress.com/2016/07/18/jetson-tk1のセットアップ/

sudo NVIDIA-INSTALLER/installer.sh
sudo shutdown -r now

# http://elinux.org/Jetson_TK1
# "libglx.so" is a specific file in NVIDIA's graphics driver that might get replaced by an incorrect version from Ubuntu
# 最近は問題ないみたい
# sudo apt-mark hold xserver-xorg-core
#
#sudo apt-add-repository universe
sudo apt-get update
#
sudo apt-get install bash-completion command-not-found
#sudo apt-file update &>/dev/null
#sudo update-command-not-found &>/dev/null
#exit
#
# If you will use the graphical environment (Unity) a lot
# turn off the desktop shopping suggestions
gsettings set com.canonical.Unity.Lenses disabled-scopes "['more_suggestions-amazon.scope', \
    'more_suggestions-u1ms.scope', 'more_suggestions-populartracks.scope', 'music-musicstore.scope', \
    'more_suggestions-ebay.scope', 'more_suggestions-ubuntushop.scope', 'more_suggestions-skimlinks.scope']"
    
    
##### インストール後の初期設定
# タイムゾーンの設定
# http://rabbit-note.com/2014/08/15/jetson-tk1-sd-boot/
sudo dpkg-reconfigure tzdata
# universe リポジトリの追加
sudo apt-add-repository universe
sudo apt-get update
# コマンドが見つからなかった場合，インストールすべきパッケージが表示されるようにする
sudo apt-get install bash-completion command-not-found

##### GRINCH KERNELのインストール (WiFimoモジュールの導入)
# https://daichiahl.wordpress.com/2016/07/18/jetson-tk1のセットアップ/
cd ~/git
git clone https://github.com/jetsonhacks/installGrinch.git
cd installGrinch
./installGrinch.sh
sudo reboot

sudo apt-get install git screen curl
sudo apt-get install chromium-browser

sudo apt-get upgrade

##### CUDA config
# http://elinux.org/Jetson/Installing_CUDA
echo "# Add CUDA bin & library paths:" >> ~/.bashrc
echo "export PATH=/usr/local/cuda/bin:$PATH" >> ~/.bashrc
echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
source ~/.bashrc

##### SWAP
# /data に mount したSDカードにスワップを作成する。
# これをしないとbazelのコンパイル途中で死ぬ
sudo mkdir /data
sudo chmod a+rwx /data
sudo mount /dev/mmcblk1p1 /data/
cd /data
sudo fallocate -l 4G swapfile
sudo chmod 600 swapfile
sudo mkswap swapfile
sudo swapon swapfile
swapon -s

##### keras on tensorflow
## install open-jdk8
# http://qiita.com/ytkumasan/items/0a6b9e512e3dd5c08a31
sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk
# tensorflow
git clone https://github.com/dat-ai/tensorflow-on-nvidia-jetson.git
cd tensorflow-on-nvidia-jetson/
sudo pip install tensorflow-0.8.0-py2-none-any.whl
# keras
sudo pip install keras==1.0.4
sudo apt-get -y install python-scipy
git clone https://github.com/fchollet/keras.git
git checkout tags/1.0.4

##### chainer
# http://qiita.com/suisuina/items/75751a5ea4128e133dde
# chainer==2.1.0
pip install cython
pip install chainer
pip install caffe

##### jupyter
# http://www.cellstat.net/jetson-tk1-chainer/
pip install jupyter






##### caffe
# http://takesan.hatenablog.com/entry/2016/06/26/005516
sudo apt-get install libboost-all-dev g++-4.8-multilib
sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev
git clone https://github.com/BVLC/caffe.git
cd caffe
cp -p Makefile.config.example Makefile.config
#USE_CUDNN :=1 の行をコメントはずす
# CUSTOM_CXX := g++ の行をCUSTOM_CXX := g++-4.8 に変更
make all -j4























## dependencies
# http://cudamusing.blogspot.jp/2015/11/building-tensorflow-for-jetson-tk1.html
sudo apt-get install git zip unzip autoconf automake libtool curl zlib1g-dev  
cd ~/git
git clone https://github.com/google/protobuf.git
cd protobuf
./autogen.sh 
./configure --prefix=/usr
make -j 4
sudo make install
sudo apt-get install -y maven
cd java
mvn package # 10時間かかった
## install bazel
# https://docs.bazel.build/versions/master/install-compile-source.html
# そこそこ時間がかかる
cd ~/git
git clone https://github.com/bazelbuild/bazel.git
cd bazel
git checkout tags/0.1.0
cp /usr/bin/protoc   third_party/protobuf/protoc-linux-arm32.exe
cp ~/git/protobuf/java/core/target/protobuf-java-3.1.0.jar  third_party/protobuf/protobuf-java-3.0.0-alpha-3.jar
time bash ./compile.sh # 54分かかった
sudo cp -p output/bazel /usr/loical/bin/
#
# tensorflow
# http://cudamusing.blogspot.jp/2015/11/building-tensorflow-for-jetson-tk1.html
sudo apt-get install python-numpy swig python-dev
cd ~/git
git clone --recurse-submodules https://github.com/tensorflow/tensorflow
cd tensorflow
grep -Rl "lib64"| xargs sed -i 's/lib64/lib/g'
grep -Rl "so.7.0"| xargs sed -i 's/so\.7\.0/so\.6\.5/g'

#
# 5th: Install "CUDA 6.5", "cuDNN v2" and "CUDA 7.0"
# https://github.com/Lisandro79/JetsonCaffe/wiki/Install-Tensorflow-on-TK1
# 
# *Install "cuDNN v2"  
# *access nvidia cuDNN archive and register your account
# *download "cuDNN v2 Library for L4T (ARM) 21.1"
tar zxvf cudnn-6.5-linux-ARM-v2.tgz  
cd cudnn-6.5-linux-ARM-v2  
sudo cp cudnn.h /usr/local/cuda-6.5/include/  
sudo cp libcudnn* /usr/local/cuda-6.5/lib/  
# *Install "CUDA 7.0"
cd
wget http://developer.download.nvidia.com/embedded/L4T/r24_Release_v1.0/CUDA/cuda-repo-l4t-7-0-local_7.0-76_armhf.deb
sudo dpkg -i cuda-repo-l4t-7-0-local_7.0-76_armhf.deb 
sudo apt-get update
sudo apt-get install cuda-toolkit-7-0  
cd /usr/local  
sudo rm cuda  
sudo ln -s cuda-6.5/ cuda
# *Add path to .bashrc
echo "export CPAHT=/usr/local/cuda/include:$CPATH" >> ~/.bashrc  
echo "export PAHT=/usr/local/cuda/bin:$PATH" >> ~/.bashrc  
echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib:$LD_LIBRARY_PATH" >> ~/.bashrc  
source ~/.bashrc  

# tensorflow
git clone https://github.com/dat-ai/tensorflow-on-nvidia-jetson.git
cd tensorflow-on-nvidia-jetson/
sudo pip install tensorflow-0.8.0-py2-none-any.whl
# keras
sudo pip install keras==1.0.4

# chainer
pip install -U setuptools
sudo apt-get -y install python-dev python-virtualenv
sudo pip install cython
sudo apt-get -y install libhdf5-dev
sudo pip install chainer








# https://daichiahl.wordpress.com/2016/07/18/jetson-tk1%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/
# USB3.0の有効化
# usb_port_owner_info=0とある部分をusb_port_owner_info=2に変更
sudo gedit /boot/extlinux/extlinux.conf


#sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#sudo apt-get update
#sudo apt-get install g++-4.9


##### 機械学習関係
# Chainer-gogh
sudo apt-get install python-pip python-dev python-virtualenv
sudo pip install cython
sudo apt-get install libhdf5-dev
sudo pip install chainer
# enable CUDA support
#pip install cupy
# Run the MNIST example:
#wget https://github.com/pfnet/chainer/archive/v2.0.2.tar.gz
#tar xzf v2.0.2.tar.gz
#python chainer-2.0.2/examples/mnist/train_mnist.py
cd ~/git && git clone https://github.com/chainer/chainer.git
python chainer/examples/mnist/train_mnist.py
#
sudo pip install jupyter



##### Turning some CPU cores on and some off
#http://elinux.org/Jetson/Performance
#echo 1 > /sys/devices/system/cpu/cpu0/online
#echo 0 > /sys/devices/system/cpu/cpu1/online
#echo 0 > /sys/devices/system/cpu/cpu2/online
#echo 0 > /sys/devices/system/cpu/cpu3/online

##### opencv
sudo apt-get -y -qq install cmake git libgtk2.0-dev ocl-icd-opencl-dev qt5-default
git clone https://github.com/opencv/opencv.git
cd opencv
git clone --depth 1 https://github.com/Itseez/opencv_contrib.git opencv_contrib
mkdir build && cd build
cmake .. \
-DWITH_OPENGL:BOOL=ON \
-DWITH_QT:BOOL=ON \
-DWITH_CUDA:BOOL=ON \
-DCUDA_ARCH_BIN="5.2" \
-DCUDA_ARCH_PTX="5.2" \
-DCMAKE_BUILD_TYPE=RelWithDebugInfo \
-DCMAKE_INSTALL_PREFIX=/usr/local \
-DBUILD_TESTS:BOOL=OFF \
-DBUILD_PERF_TESTS:BOOL=OFF \
-DWITH_FFMPEG:BOOL=OFF \
-DENABLE_NEON:BOOL=ON \
-DBUILD_EXAMPLES:BOOL=ON \
-DINSTALL_C_EXAMPLES:BOOL=OFF \
-DINSTALL_PYTHON_EXAMPLES:BOOL=ON \
-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules




##### add swap
# https://devtalk.nvidia.com/default/topic/971120/jetson-tk1/detectnet-on-tk1/post/5176627/#5176627
fallocate -l 8G swapfile
ls -lh swapfile
chmod 600 swapfile
ls -lh swapfile
mkswap swapfile
sudo swapon swapfile
swapon -s


##### Tensorflow
# Installing Bazel
# https://github.com/Lisandro79/JetsonCaffe/wiki/Install-Tensorflow-on-TK1
git clone https://github.com/bazelbuild/bazel.git  
# Tensorflowのセットアップ
# http://qiita.com/ebonyeye/items/78f3139968ecb23b920a#tensorflowのセットアップ
mkdir ~/git 
cd ~/git
git clone --recurse-submodules https://github.com/tensorflow/tensorflow
cd tensorflow
./configure
Jetson TK1 で mini PCI-Express カードによる無線LAN 接続を行う方法
http://rabbit-note.com/2014/08/16/jetson-tk1-use-intel-7260/

Now you can continue to download the file: 
https://developer.nvidia.com/user

##### How to run the Caffe deep learning vision library on Nvidia’s Jetson mobile GPU board
# https://petewarden.com/2014/10/25/how-to-run-the-caffe-deep-learning-vision-library-on-nvidias-jetson-mobile-gpu-board/
